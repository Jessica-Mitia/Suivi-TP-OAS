openapi: 3.0.1
info:
  title: User Profile API
  version: 1.0.0
servers:
  - url: 'http://localhost:8000'

paths:
  /users/{id}:
    get:
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Un utilisateur complet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
              example:
                identifier: "u123"
                first_name: "Fitia"
                last_name: "Princia"
                birthdate: "2000-05-20"
                email: "fitia@example.com"
                address_street: "IVH 132 A"
                address_city: "Antananarivo"
                address_country: "MG"
                address_postal_code: "101"
                needs_newsletter: true
                language: "fr"

  /users:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateUserProfile'
            example:
              - first_name: "Fitia"
                last_name: "Princia"
                birthdate: "2000-05-20"
                email: "fitia@example.com"
                address_street: "IVH 132 A"
                address_city: "Antananarivo"
                address_country: "MG"
                address_postal_code: "101"
                needs_newsletter: true
                language: "fr"
      responses:
        '201':
          description: Liste des utilisateurs créés avec identifiants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'

  /users/{id}/personalInfo:
    put:
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalInfo'
      responses:
        '200':
          description: Infos personnelles mises à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /users/{id}/address:
    put:
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Adresse mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /users/{id}/preferences:
    put:
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Preferences'
      responses:
        '200':
          description: Préférences mises à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

components:
  schemas:
    UserProfile:
      allOf:
        - $ref: '#/components/schemas/CreateUserProfile'
        - type: object
          properties:
            identifier:
              type: string
              example: "u123"

    CreateUserProfile:
      type: object
      properties:
        personalInfo:
          $ref: '#/components/schemas/PersonalInfo'
        address:
          $ref: '#/components/schemas/Address'
        preferences:
          $ref: '#/components/schemas/Preferences'

    PersonalInfo:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        birthdate:
          type: string
          format: date
        email:
          type: string
          format: email

    Address:
      type: object
      properties:
        address_street:
          type: string
        address_city:
          type: string
        address_country:
          type: string
        address_postal_code:
          type: string

    Preferences:
      type: object
      properties:
        needs_newsletter:
          type: boolean
        language:
          type: string
          enum: [mg, fr, eng]

  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
